//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MPUMessenger.MPUService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.Communication", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsCommunication : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MPU = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MPU_RED = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.Connection", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsConnection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_CONNECTED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONNECTED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONNECTION_LOST = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.MPUType", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsMPUType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Master = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Slave = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MPU", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    [System.SerializableAttribute()]
    public partial class MPU : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool A1VehicleDoorStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool A2VehicleDoorStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool B1VehicleDoorStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool C1VehicleDoorStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DD_CMileageKm_1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EVR_CResetDistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EVR_ICountDistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsMPUType MPUTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VB_DRS_OpenDoorsLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VB_DRS_OpenDoorsRightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VB_DRS_TLLeftDrsReleasedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VB_DRS_TLRightDrsReleasedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VI_TBS_TrainSpeedKphField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsCommunication communicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsConnection connectionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool A1VehicleDoorStatus {
            get {
                return this.A1VehicleDoorStatusField;
            }
            set {
                if ((this.A1VehicleDoorStatusField.Equals(value) != true)) {
                    this.A1VehicleDoorStatusField = value;
                    this.RaisePropertyChanged("A1VehicleDoorStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool A2VehicleDoorStatus {
            get {
                return this.A2VehicleDoorStatusField;
            }
            set {
                if ((this.A2VehicleDoorStatusField.Equals(value) != true)) {
                    this.A2VehicleDoorStatusField = value;
                    this.RaisePropertyChanged("A2VehicleDoorStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool B1VehicleDoorStatus {
            get {
                return this.B1VehicleDoorStatusField;
            }
            set {
                if ((this.B1VehicleDoorStatusField.Equals(value) != true)) {
                    this.B1VehicleDoorStatusField = value;
                    this.RaisePropertyChanged("B1VehicleDoorStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool C1VehicleDoorStatus {
            get {
                return this.C1VehicleDoorStatusField;
            }
            set {
                if ((this.C1VehicleDoorStatusField.Equals(value) != true)) {
                    this.C1VehicleDoorStatusField = value;
                    this.RaisePropertyChanged("C1VehicleDoorStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DD_CMileageKm_1 {
            get {
                return this.DD_CMileageKm_1Field;
            }
            set {
                if ((this.DD_CMileageKm_1Field.Equals(value) != true)) {
                    this.DD_CMileageKm_1Field = value;
                    this.RaisePropertyChanged("DD_CMileageKm_1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EVR_CResetDist {
            get {
                return this.EVR_CResetDistField;
            }
            set {
                if ((this.EVR_CResetDistField.Equals(value) != true)) {
                    this.EVR_CResetDistField = value;
                    this.RaisePropertyChanged("EVR_CResetDist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EVR_ICountDist {
            get {
                return this.EVR_ICountDistField;
            }
            set {
                if ((this.EVR_ICountDistField.Equals(value) != true)) {
                    this.EVR_ICountDistField = value;
                    this.RaisePropertyChanged("EVR_ICountDist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsMPUType MPUType {
            get {
                return this.MPUTypeField;
            }
            set {
                if ((this.MPUTypeField.Equals(value) != true)) {
                    this.MPUTypeField = value;
                    this.RaisePropertyChanged("MPUType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VB_DRS_OpenDoorsLeft {
            get {
                return this.VB_DRS_OpenDoorsLeftField;
            }
            set {
                if ((this.VB_DRS_OpenDoorsLeftField.Equals(value) != true)) {
                    this.VB_DRS_OpenDoorsLeftField = value;
                    this.RaisePropertyChanged("VB_DRS_OpenDoorsLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VB_DRS_OpenDoorsRight {
            get {
                return this.VB_DRS_OpenDoorsRightField;
            }
            set {
                if ((this.VB_DRS_OpenDoorsRightField.Equals(value) != true)) {
                    this.VB_DRS_OpenDoorsRightField = value;
                    this.RaisePropertyChanged("VB_DRS_OpenDoorsRight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VB_DRS_TLLeftDrsReleased {
            get {
                return this.VB_DRS_TLLeftDrsReleasedField;
            }
            set {
                if ((this.VB_DRS_TLLeftDrsReleasedField.Equals(value) != true)) {
                    this.VB_DRS_TLLeftDrsReleasedField = value;
                    this.RaisePropertyChanged("VB_DRS_TLLeftDrsReleased");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VB_DRS_TLRightDrsReleased {
            get {
                return this.VB_DRS_TLRightDrsReleasedField;
            }
            set {
                if ((this.VB_DRS_TLRightDrsReleasedField.Equals(value) != true)) {
                    this.VB_DRS_TLRightDrsReleasedField = value;
                    this.RaisePropertyChanged("VB_DRS_TLRightDrsReleased");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VI_TBS_TrainSpeedKph {
            get {
                return this.VI_TBS_TrainSpeedKphField;
            }
            set {
                if ((this.VI_TBS_TrainSpeedKphField.Equals(value) != true)) {
                    this.VI_TBS_TrainSpeedKphField = value;
                    this.RaisePropertyChanged("VI_TBS_TrainSpeedKph");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsCommunication communication {
            get {
                return this.communicationField;
            }
            set {
                if ((this.communicationField.Equals(value) != true)) {
                    this.communicationField = value;
                    this.RaisePropertyChanged("communication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsConnection connection {
            get {
                return this.connectionField;
            }
            set {
                if ((this.connectionField.Equals(value) != true)) {
                    this.connectionField = value;
                    this.RaisePropertyChanged("connection");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnouncementDTO", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    [System.SerializableAttribute()]
    public partial struct AnnouncementDTO : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsAnnouncementType announcementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsMetroLines metroLinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string privateAnnouncementFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsStationName stationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MPUMessenger.MPUService.EnumsAnnouncement statusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsAnnouncementType announcementType {
            get {
                return this.announcementTypeField;
            }
            set {
                if ((this.announcementTypeField.Equals(value) != true)) {
                    this.announcementTypeField = value;
                    this.RaisePropertyChanged("announcementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsMetroLines metroLines {
            get {
                return this.metroLinesField;
            }
            set {
                if ((this.metroLinesField.Equals(value) != true)) {
                    this.metroLinesField = value;
                    this.RaisePropertyChanged("metroLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string privateAnnouncementFileName {
            get {
                return this.privateAnnouncementFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.privateAnnouncementFileNameField, value) != true)) {
                    this.privateAnnouncementFileNameField = value;
                    this.RaisePropertyChanged("privateAnnouncementFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsStationName stationName {
            get {
                return this.stationNameField;
            }
            set {
                if ((this.stationNameField.Equals(value) != true)) {
                    this.stationNameField = value;
                    this.RaisePropertyChanged("stationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MPUMessenger.MPUService.EnumsAnnouncement status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.AnnouncementType", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsAnnouncementType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Station = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Approach = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Start = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Target = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Interchange = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Special = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.MetroLines", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsMetroLines : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M3 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M9 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Common = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.StationName", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsStationName : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KayaşehirMerkez = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopluKonutlar = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ŞehirHastanesi = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Onurkent = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BaşakşehirMetrokent = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BaşakKonutları = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Siteler = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TurgutÖzal = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        İkitelliSanayi = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        İSTOÇ = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mahmutbey = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yenimahalle = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Kirazlı = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MollaGürani = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yıldıztepe = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        İlkyuva = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Haznedar = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        İncirli = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ÖzgürlükMeydanı = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BakırköySahil = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ataköy = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yenibosna = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Çobançeşme = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YirmiDokuzEkimCumhuriyet = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoğuSanayi = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MimarSinan = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnBeşTemmuz = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HalkalıCaddesi = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AtatürkMahallesi = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bahariye = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MASKO = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZiyaGökalpMahallesi = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Olimpiyat = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NA = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DepoSahası = 34,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.Announcement", Namespace="http://schemas.datacontract.org/2004/07/M3YBSCommunication")]
    public enum EnumsAnnouncement : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Play = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 64,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MPUService.IM3YBSCommunication", CallbackContract=typeof(MPUMessenger.MPUService.IM3YBSCommunicationCallback))]
    public interface IM3YBSCommunication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/Subscribe", ReplyAction="http://tempuri.org/IM3YBSCommunication/SubscribeResponse")]
        bool Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/Subscribe", ReplyAction="http://tempuri.org/IM3YBSCommunication/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/Unsubscribe", ReplyAction="http://tempuri.org/IM3YBSCommunication/UnsubscribeResponse")]
        bool Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/Unsubscribe", ReplyAction="http://tempuri.org/IM3YBSCommunication/UnsubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ResetDistanceCounter", ReplyAction="http://tempuri.org/IM3YBSCommunication/ResetDistanceCounterResponse")]
        void ResetDistanceCounter(bool resetCountDist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ResetDistanceCounter", ReplyAction="http://tempuri.org/IM3YBSCommunication/ResetDistanceCounterResponse")]
        System.Threading.Tasks.Task ResetDistanceCounterAsync(bool resetCountDist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/IncreaseDistanceCounter", ReplyAction="http://tempuri.org/IM3YBSCommunication/IncreaseDistanceCounterResponse")]
        void IncreaseDistanceCounter(int increaseCountDist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/IncreaseDistanceCounter", ReplyAction="http://tempuri.org/IM3YBSCommunication/IncreaseDistanceCounterResponse")]
        System.Threading.Tasks.Task IncreaseDistanceCounterAsync(int increaseCountDist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeat", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatResponse")]
        string HeartBeat([System.ServiceModel.MessageParameterAttribute(Name="heartBeat")] string heartBeat1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeat", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatResponse")]
        System.Threading.Tasks.Task<string> HeartBeatAsync(string heartBeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionCheck", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionCheckResponse")]
        string HeartBeatWithConnectionCheck(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionCheck", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionCheckResponse")]
        System.Threading.Tasks.Task<string> HeartBeatWithConnectionCheckAsync(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionAndMPUStatusCheck", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionAndMPUStatusCheckRe" +
            "sponse")]
        string HeartBeatWithConnectionAndMPUStatusCheck(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus, MPUMessenger.MPUService.EnumsMPUType mpuType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionAndMPUStatusCheck", ReplyAction="http://tempuri.org/IM3YBSCommunication/HeartBeatWithConnectionAndMPUStatusCheckRe" +
            "sponse")]
        System.Threading.Tasks.Task<string> HeartBeatWithConnectionAndMPUStatusCheckAsync(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus, MPUMessenger.MPUService.EnumsMPUType mpuType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUStatusResponse")]
        void MPUStatus(MPUMessenger.MPUService.MPU mpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUStatusResponse")]
        System.Threading.Tasks.Task MPUStatusAsync(MPUMessenger.MPUService.MPU mpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUConnectionStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUConnectionStatusResponse")]
        void MPUConnectionStatus(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUConnectionStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUConnectionStatusResponse")]
        System.Threading.Tasks.Task MPUConnectionStatusAsync(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUBehaviorStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUBehaviorStatusResponse")]
        void MPUBehaviorStatus(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsMPUType MPUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPUBehaviorStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPUBehaviorStatusResponse")]
        System.Threading.Tasks.Task MPUBehaviorStatusAsync(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsMPUType MPUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPURedundancyStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPURedundancyStatusResponse")]
        void MPURedundancyStatus(int redundancyStatus, string MPUName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/MPURedundancyStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/MPURedundancyStatusResponse")]
        System.Threading.Tasks.Task MPURedundancyStatusAsync(int redundancyStatus, string MPUName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/AddOrFindInRedundancyMPU", ReplyAction="http://tempuri.org/IM3YBSCommunication/AddOrFindInRedundancyMPUResponse")]
        MPUMessenger.MPUService.MPU AddOrFindInRedundancyMPU(MPUMessenger.MPUService.MPU mpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/AddOrFindInRedundancyMPU", ReplyAction="http://tempuri.org/IM3YBSCommunication/AddOrFindInRedundancyMPUResponse")]
        System.Threading.Tasks.Task<MPUMessenger.MPUService.MPU> AddOrFindInRedundancyMPUAsync(MPUMessenger.MPUService.MPU mpu);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/SetMasterVolumeMute")]
        void SetMasterVolumeMute(bool mute);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/SetMasterVolumeMute")]
        System.Threading.Tasks.Task SetMasterVolumeMuteAsync(bool mute);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/SetMasterVolume")]
        void SetMasterVolume(int newLevel);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/SetMasterVolume")]
        System.Threading.Tasks.Task SetMasterVolumeAsync(int newLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/GetMasterVolume", ReplyAction="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeResponse")]
        int GetMasterVolume();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/GetMasterVolume", ReplyAction="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeResponse")]
        System.Threading.Tasks.Task<int> GetMasterVolumeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeMute", ReplyAction="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeMuteResponse")]
        bool GetMasterVolumeMute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeMute", ReplyAction="http://tempuri.org/IM3YBSCommunication/GetMasterVolumeMuteResponse")]
        System.Threading.Tasks.Task<bool> GetMasterVolumeMuteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/LearnMPUStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/LearnMPUStatusResponse")]
        string LearnMPUStatus(string MPUName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/LearnMPUStatus", ReplyAction="http://tempuri.org/IM3YBSCommunication/LearnMPUStatusResponse")]
        System.Threading.Tasks.Task<string> LearnMPUStatusAsync(string MPUName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/AnnouncementStatus")]
        void AnnouncementStatus(MPUMessenger.MPUService.AnnouncementDTO announcementDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/AnnouncementStatus")]
        System.Threading.Tasks.Task AnnouncementStatusAsync(MPUMessenger.MPUService.AnnouncementDTO announcementDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ConvertStationNameEnumToString", ReplyAction="http://tempuri.org/IM3YBSCommunication/ConvertStationNameEnumToStringResponse")]
        string ConvertStationNameEnumToString(MPUMessenger.MPUService.EnumsStationName stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ConvertStationNameEnumToString", ReplyAction="http://tempuri.org/IM3YBSCommunication/ConvertStationNameEnumToStringResponse")]
        System.Threading.Tasks.Task<string> ConvertStationNameEnumToStringAsync(MPUMessenger.MPUService.EnumsStationName stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ConvertStationNameStringToEnum", ReplyAction="http://tempuri.org/IM3YBSCommunication/ConvertStationNameStringToEnumResponse")]
        MPUMessenger.MPUService.EnumsStationName ConvertStationNameStringToEnum(string stationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IM3YBSCommunication/ConvertStationNameStringToEnum", ReplyAction="http://tempuri.org/IM3YBSCommunication/ConvertStationNameStringToEnumResponse")]
        System.Threading.Tasks.Task<MPUMessenger.MPUService.EnumsStationName> ConvertStationNameStringToEnumAsync(string stationName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IM3YBSCommunicationCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/MPUConnectionStatusChanged")]
        void MPUConnectionStatusChanged(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connection);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/MPUBehaviorChanged")]
        void MPUBehaviorChanged(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsMPUType MPUType, string masterMPUName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/MPURedundancyStateChanged")]
        void MPURedundancyStateChanged(int redundancyState, string MPUName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/A1VehicleDoorStatusChanged")]
        void A1VehicleDoorStatusChanged(bool A1VehicleDoorStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/A2VehicleDoorStatusChanged")]
        void A2VehicleDoorStatusChanged(bool A2VehicleDoorStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/C1VehicleDoorStatusChanged")]
        void C1VehicleDoorStatusChanged(bool C1VehicleDoorStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/B1VehicleDoorStatusChanged")]
        void B1VehicleDoorStatusChanged(bool B1VehicleDoorStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VB_DRS_TLLeftDrsReleasedChanged")]
        void VB_DRS_TLLeftDrsReleasedChanged(bool VB_DRS_TLLeftDrsReleased);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VB_DRS_TLRightDrsReleasedChanged")]
        void VB_DRS_TLRightDrsReleasedChanged(bool VB_DRS_TLRightDrsReleased);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VB_DRS_OpenDoorsLeftChanged")]
        void VB_DRS_OpenDoorsLeftChanged(bool VB_DRS_OpenDoorsLeft);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VB_DRS_OpenDoorsRightChanged")]
        void VB_DRS_OpenDoorsRightChanged(bool VB_DRS_OpenDoorsRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VI_TBS_TrainSpeedKphChanged")]
        void VI_TBS_TrainSpeedKphChanged(int VI_TBS_TrainSpeedKph);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/EVR_ICountDistChanged")]
        void EVR_ICountDistChanged(int EVR_ICountDist);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VolumeStatusChanged")]
        void VolumeStatusChanged(int volume);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/VolumeMuteStatusChanged")]
        void VolumeMuteStatusChanged(bool mute);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/NotifyMasterMPUForResetEVRDistanceStatus")]
        void NotifyMasterMPUForResetEVRDistanceStatus(string masterMPU, bool EVR_ICountDist);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/EVR_CResetDistChanged")]
        void EVR_CResetDistChanged(bool EVR_CResetDist);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/DD_CMileageKm_1Changed")]
        void DD_CMileageKm_1Changed(int DD_CMileageKm_1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IM3YBSCommunication/AnnouncementStatusChanged")]
        void AnnouncementStatusChanged(MPUMessenger.MPUService.AnnouncementDTO announcementDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IM3YBSCommunicationChannel : MPUMessenger.MPUService.IM3YBSCommunication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class M3YBSCommunicationClient : System.ServiceModel.DuplexClientBase<MPUMessenger.MPUService.IM3YBSCommunication>, MPUMessenger.MPUService.IM3YBSCommunication {
        
        public M3YBSCommunicationClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public M3YBSCommunicationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public M3YBSCommunicationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public M3YBSCommunicationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public M3YBSCommunicationClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Subscribe() {
            return base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public bool Unsubscribe() {
            return base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task<bool> UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public void ResetDistanceCounter(bool resetCountDist) {
            base.Channel.ResetDistanceCounter(resetCountDist);
        }
        
        public System.Threading.Tasks.Task ResetDistanceCounterAsync(bool resetCountDist) {
            return base.Channel.ResetDistanceCounterAsync(resetCountDist);
        }
        
        public void IncreaseDistanceCounter(int increaseCountDist) {
            base.Channel.IncreaseDistanceCounter(increaseCountDist);
        }
        
        public System.Threading.Tasks.Task IncreaseDistanceCounterAsync(int increaseCountDist) {
            return base.Channel.IncreaseDistanceCounterAsync(increaseCountDist);
        }
        
        public string HeartBeat(string heartBeat1) {
            return base.Channel.HeartBeat(heartBeat1);
        }
        
        public System.Threading.Tasks.Task<string> HeartBeatAsync(string heartBeat) {
            return base.Channel.HeartBeatAsync(heartBeat);
        }
        
        public string HeartBeatWithConnectionCheck(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus) {
            return base.Channel.HeartBeatWithConnectionCheck(heartBeat, communication, connectionStatus);
        }
        
        public System.Threading.Tasks.Task<string> HeartBeatWithConnectionCheckAsync(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus) {
            return base.Channel.HeartBeatWithConnectionCheckAsync(heartBeat, communication, connectionStatus);
        }
        
        public string HeartBeatWithConnectionAndMPUStatusCheck(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus, MPUMessenger.MPUService.EnumsMPUType mpuType) {
            return base.Channel.HeartBeatWithConnectionAndMPUStatusCheck(heartBeat, communication, connectionStatus, mpuType);
        }
        
        public System.Threading.Tasks.Task<string> HeartBeatWithConnectionAndMPUStatusCheckAsync(string heartBeat, MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus, MPUMessenger.MPUService.EnumsMPUType mpuType) {
            return base.Channel.HeartBeatWithConnectionAndMPUStatusCheckAsync(heartBeat, communication, connectionStatus, mpuType);
        }
        
        public void MPUStatus(MPUMessenger.MPUService.MPU mpu) {
            base.Channel.MPUStatus(mpu);
        }
        
        public System.Threading.Tasks.Task MPUStatusAsync(MPUMessenger.MPUService.MPU mpu) {
            return base.Channel.MPUStatusAsync(mpu);
        }
        
        public void MPUConnectionStatus(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus) {
            base.Channel.MPUConnectionStatus(communication, connectionStatus);
        }
        
        public System.Threading.Tasks.Task MPUConnectionStatusAsync(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsConnection connectionStatus) {
            return base.Channel.MPUConnectionStatusAsync(communication, connectionStatus);
        }
        
        public void MPUBehaviorStatus(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsMPUType MPUType) {
            base.Channel.MPUBehaviorStatus(communication, MPUType);
        }
        
        public System.Threading.Tasks.Task MPUBehaviorStatusAsync(MPUMessenger.MPUService.EnumsCommunication communication, MPUMessenger.MPUService.EnumsMPUType MPUType) {
            return base.Channel.MPUBehaviorStatusAsync(communication, MPUType);
        }
        
        public void MPURedundancyStatus(int redundancyStatus, string MPUName) {
            base.Channel.MPURedundancyStatus(redundancyStatus, MPUName);
        }
        
        public System.Threading.Tasks.Task MPURedundancyStatusAsync(int redundancyStatus, string MPUName) {
            return base.Channel.MPURedundancyStatusAsync(redundancyStatus, MPUName);
        }
        
        public MPUMessenger.MPUService.MPU AddOrFindInRedundancyMPU(MPUMessenger.MPUService.MPU mpu) {
            return base.Channel.AddOrFindInRedundancyMPU(mpu);
        }
        
        public System.Threading.Tasks.Task<MPUMessenger.MPUService.MPU> AddOrFindInRedundancyMPUAsync(MPUMessenger.MPUService.MPU mpu) {
            return base.Channel.AddOrFindInRedundancyMPUAsync(mpu);
        }
        
        public void SetMasterVolumeMute(bool mute) {
            base.Channel.SetMasterVolumeMute(mute);
        }
        
        public System.Threading.Tasks.Task SetMasterVolumeMuteAsync(bool mute) {
            return base.Channel.SetMasterVolumeMuteAsync(mute);
        }
        
        public void SetMasterVolume(int newLevel) {
            base.Channel.SetMasterVolume(newLevel);
        }
        
        public System.Threading.Tasks.Task SetMasterVolumeAsync(int newLevel) {
            return base.Channel.SetMasterVolumeAsync(newLevel);
        }
        
        public int GetMasterVolume() {
            return base.Channel.GetMasterVolume();
        }
        
        public System.Threading.Tasks.Task<int> GetMasterVolumeAsync() {
            return base.Channel.GetMasterVolumeAsync();
        }
        
        public bool GetMasterVolumeMute() {
            return base.Channel.GetMasterVolumeMute();
        }
        
        public System.Threading.Tasks.Task<bool> GetMasterVolumeMuteAsync() {
            return base.Channel.GetMasterVolumeMuteAsync();
        }
        
        public string LearnMPUStatus(string MPUName) {
            return base.Channel.LearnMPUStatus(MPUName);
        }
        
        public System.Threading.Tasks.Task<string> LearnMPUStatusAsync(string MPUName) {
            return base.Channel.LearnMPUStatusAsync(MPUName);
        }
        
        public void AnnouncementStatus(MPUMessenger.MPUService.AnnouncementDTO announcementDTO) {
            base.Channel.AnnouncementStatus(announcementDTO);
        }
        
        public System.Threading.Tasks.Task AnnouncementStatusAsync(MPUMessenger.MPUService.AnnouncementDTO announcementDTO) {
            return base.Channel.AnnouncementStatusAsync(announcementDTO);
        }
        
        public string ConvertStationNameEnumToString(MPUMessenger.MPUService.EnumsStationName stationName) {
            return base.Channel.ConvertStationNameEnumToString(stationName);
        }
        
        public System.Threading.Tasks.Task<string> ConvertStationNameEnumToStringAsync(MPUMessenger.MPUService.EnumsStationName stationName) {
            return base.Channel.ConvertStationNameEnumToStringAsync(stationName);
        }
        
        public MPUMessenger.MPUService.EnumsStationName ConvertStationNameStringToEnum(string stationName) {
            return base.Channel.ConvertStationNameStringToEnum(stationName);
        }
        
        public System.Threading.Tasks.Task<MPUMessenger.MPUService.EnumsStationName> ConvertStationNameStringToEnumAsync(string stationName) {
            return base.Channel.ConvertStationNameStringToEnumAsync(stationName);
        }
    }
}
